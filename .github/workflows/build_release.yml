name: Release Build

on:
  workflow_dispatch:
    inputs:
      TOOLCHAINS:
        type: choice
        description: "使用的工具链"
        required: true
        default: "nightly"
        options:
          - "nightly"
          - "stable"
      TARGET:
        type: choice
        description: "编译的目标三元组"
        required: true
        default: "x86_64-unknown-linux-gnu"
        options:
          - "aarch64-unknown-linux-musl"
          - "x86_64-unknown-linux-musl"
          - "aarch64-unknown-linux-gnu"
          - "x86_64-unknown-linux-gnu"
          - "x86_64-pc-windows-msvc"
          - "aarch64-apple-darwin"
          - "x86_64-apple-darwin"
      USE_O2:
        type: boolean
        description: "是否使用O2编译？(默认O3)"
        required: true
        default: false
      USE_MIMALLOC:
        type: boolean
        description: "是否启用mimalloc替代tikv-jemallocator？"
        required: true
        default: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Optimize build performance
  CARGO_INCREMENTAL: 0
  TZ: Asia/Shanghai

jobs:
  # Build strategy check - determine build type based on trigger
  build-check:
    name: Build Strategy Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected TOOLCHAINS: ${{ github.event.inputs.TOOLCHAINS }}"
          echo "Selected TARGET: ${{ github.event.inputs.TARGET }}"
          echo "Selected USE_MIMALLOC: ${{ github.event.inputs.USE_MIMALLOC }}"
          echo "-----------------------"

  # Build RustFS binaries
  build-utils:
    name: Build Utils
    needs: [build-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    env:
      RUSTFLAGS: ${{ matrix.cross == 'false' && '-C target-cpu=native' || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'macos' || 'ubuntu') }}-latest
            target: ${{ github.event.inputs.TARGET }}
            cross: ${{ contains(github.event.inputs.TARGET, 'linux') && 'true' || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Rust environment
        uses: ./.github/actions/setup
        with:
          rust-version: ${{ github.event.inputs.TOOLCHAINS }}
          target: ${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          install-cross-tools: ${{ matrix.cross }}

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "TEST01"
          git config --global user.email "1145141919810@qq.com"

      - name: Setup TimeZone
        if: runner.os == 'Linux'
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Clone utils sources
        shell: bash
        run: |
          url="https://github.com/nacos-group/r-nacos"
          git clone --depth 1 "$url"
          cd "$(basename $url)"
          rm -rf .git rust-toolchain.toml || true

      - name: Optimize upstream mallocator and optmize level
        shell: bash
        run: |         
          git clone --depth 1 https://github.com/reigadegr/rnacos_action self_code
          rm -rf self_code/.git .git || true
          git init
          mkdir -p output || true
          echo "flag" > output/flag.txt
          if [ "${{ github.event.inputs.USE_O2 }}" = "true" ]; then
              sed -i 's/+opt-level = 3/+opt-level = 2/g' ./self_code/patchs/*
          fi

          if [ "${{ github.event.inputs.USE_MIMALLOC }}" = "true" ]; then
            malloc="use_mimalloc.patch"
          else
            malloc="jemalloc_musl_fix.patch"
          fi

          is_windows="${{ contains(github.event.inputs.TARGET, 'windows') && 'true' || 'false' }}"
          if [ "$is_windows" = "true" ]; then
              malloc="use_mimalloc.patch"
          fi

          if [ "$malloc" = "use_mimalloc.patch" ]; then
              rm -f "./self_code/patchs/jemalloc_musl_fix.patch"
          else
              rm -f "./self_code/patchs/use_mimalloc.patch"
          fi

          git add  . && git commit -m "auto commit" >/dev/null 2>&1 || echo "无需提交"
          for i in `realpath ./self_code/patchs/*.patch`; do
             patch -p1 -F 3 < $i && git add  . && git commit -m "$i成功应用" || echo "$i应用失败" >>output/failure.log
             git reset --hard
             git clean -df
          done

      - name: Build Rust Utils
        shell: bash
        run: |
          rm -rf ./*/target && echo "删除了target" || echo "无需删除"
          work_space="$(pwd)"
          mkdir output || true
          for i in $(ls); do
              [ -f "$work_space/$i/Cargo.toml" ] || continue
              rm -rf ~/.cargo/git ~/.cargo/registry ~/.cache || true
              cd "$work_space/$i"
              echo "当前编译的项目: $i"
              case "$i" in
                  "r-nacos")
                      bin_name="rnacos"
                      ;;
                  *)
                      bin_name="$i"
                      ;;
              esac

              toolchain="${{ github.event.inputs.TOOLCHAINS }}"
              platform="${{ contains(github.event.inputs.TARGET, 'windows') && 'windows' || (contains(github.event.inputs.TARGET, 'apple') && 'apple' || 'linux') }}"
              file="build_"$toolchain"_"$platform".sh"

              url="https://github.com/reigadegr/rnacos_action/raw/main/$file"
              echo "脚本直链: $url"
              curl -L $url -o "$file"
              sh "$file" "${{ matrix.target }}" "$bin_name" || continue

              is_windows="${{ contains(github.event.inputs.TARGET, 'windows') && 'true' || 'false' }}"
              if [ "$is_windows" = "true" ]; then
                  bin_name=$bin_name.exe
              fi
              file="$(find target -name "$bin_name")"
              echo "$(realpath $file)"              
              dd if=target/"${{ matrix.target }}"/release/$bin_name of=../output/$bin_name
              cd  ..
              rm -rf "$i"
          done

      - name: Upload to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.TARGET }}_rnacos_${{ github.event.inputs.TOOLCHAINS }}
          path: output/*
          retention-days: 2
